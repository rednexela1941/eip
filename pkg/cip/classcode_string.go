// Code generated by "stringer -type=ClassCode"; DO NOT EDIT.

package cip

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IdentityClassCode-1]
	_ = x[MessageRouterClassCode-2]
	_ = x[DeviceNetClassCode-3]
	_ = x[AssemblyClassCode-4]
	_ = x[ConnectionClassCode-5]
	_ = x[ConnectionManagerClassCode-6]
	_ = x[RegisterClassCode-7]
	_ = x[DiscreteInputPointClassCode-8]
	_ = x[DiscreteOutputPointClassCode-9]
	_ = x[AnalogInputPointClassCode-10]
	_ = x[AnalogOutputPointClassCode-11]
	_ = x[PortClassCode-244]
	_ = x[TCPIPInterfaceClassCode-245]
	_ = x[EthernetLinkClassCode-246]
	_ = x[LLDPManagementClassCode-265]
	_ = x[LLDPDataTableClassCode-266]
}

const (
	_ClassCode_name_0 = "IdentityClassCodeMessageRouterClassCodeDeviceNetClassCodeAssemblyClassCodeConnectionClassCodeConnectionManagerClassCodeRegisterClassCodeDiscreteInputPointClassCodeDiscreteOutputPointClassCodeAnalogInputPointClassCodeAnalogOutputPointClassCode"
	_ClassCode_name_1 = "PortClassCodeTCPIPInterfaceClassCodeEthernetLinkClassCode"
	_ClassCode_name_2 = "LLDPManagementClassCodeLLDPDataTableClassCode"
)

var (
	_ClassCode_index_0 = [...]uint8{0, 17, 39, 57, 74, 93, 119, 136, 163, 191, 216, 242}
	_ClassCode_index_1 = [...]uint8{0, 13, 36, 57}
	_ClassCode_index_2 = [...]uint8{0, 23, 45}
)

func (i ClassCode) String() string {
	switch {
	case 1 <= i && i <= 11:
		i -= 1
		return _ClassCode_name_0[_ClassCode_index_0[i]:_ClassCode_index_0[i+1]]
	case 244 <= i && i <= 246:
		i -= 244
		return _ClassCode_name_1[_ClassCode_index_1[i]:_ClassCode_index_1[i+1]]
	case 265 <= i && i <= 266:
		i -= 265
		return _ClassCode_name_2[_ClassCode_index_2[i]:_ClassCode_index_2[i+1]]
	default:
		return "ClassCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
